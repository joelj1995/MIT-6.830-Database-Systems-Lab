package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {

    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this._p = p;
        this.childIterator1 = child1;
        this.childIterator2 = child2;
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return TupleDesc.combine(childIterator1.getTupleDesc(), childIterator2.getTupleDesc());
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
        childIterator1.open();
        childIterator2.open();
    }

    public void close() {
        childIterator1.close();
        childIterator2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        childIterator1.rewind();
        childIterator2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
        try {
            if (currentOuterTuple == null) {
                currentOuterTuple = childIterator1.next();
            }
            while (true) {
                if (childIterator2.hasNext()) {
                    Tuple child2Next = childIterator2.next();
                    if (_p.filter(currentOuterTuple, child2Next)) {
                        Tuple newTuple = new Tuple(getTupleDesc());
                        for (int i = 0; i < getTupleDesc().numFields(); i++) {
                            if (i < currentOuterTuple.getTupleDesc().numFields()) {
                                newTuple.setField(i, currentOuterTuple.getField(i));
                            } else {
                                newTuple.setField(i, child2Next.getField(i - currentOuterTuple.getTupleDesc().numFields()));
                            }
                        }
                        return newTuple;
                    }
                } else {
                    currentOuterTuple = childIterator1.next();
                    childIterator2.rewind();
                }
            }
        } catch (NoSuchElementException e) {
            return null;
        }
    }

    private JoinPredicate _p;
    private DbIterator childIterator1; // outer
    private DbIterator childIterator2; // inner
    private Tuple currentOuterTuple;
}
